test = 2
setwd("C:/Users/luc.bertin/Desktop/publicis") ; source("functions.R")
rm(list = ls())
cat("\014")
setwd("C:/Users/luc.bertin/Desktop/publicis") ; source("functions.R")
getwd()
setwd("C:/Users/luc.bertin/Desktop/publicis") ; source("functions.R")
getwd()
setwd("/publicis")
setwd("publicis")
setwd("publicis/")
setwd("/publicis/")
setwd("/Desktop/")
setwd("/Desktop")
usePackage("caret")
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dependencies = TRUE)
require(p, character.only = TRUE)
}
importLibraries = function(){
usePackage("dplyr")
usePackage("MASS")
usePackage("ggplot2")
usePackage("grid")
usePackage("gridExtra")
usePackage("GGally")
usePackage("plyr")
usePackage("rlist")
usePackage("ggpubr")
usePackage("e1071")
usePackage("dataPreparation")
usePackage("ggcorrplot")
#dependencies
usePackage("recipes")
usePackage("caret")
usePackage("data.table")
usePackage("ROCR")
usePackage("randomForest")
usePackage("pROC")
}
usePackage("dplyr")
usePackage("MASS")
usePackage("ggplot2")
usePackage("grid")
usePackage("gridExtra")
usePackage("GGally")
usePackage("plyr")
usePackage("rlist")
usePackage("ggpubr")
usePackage("e1071")
usePackage("dataPreparation")
usePackage("ggcorrplot")
#dependencies
usePackage("recipes")
usePackage("caret")
usePackage("caret")
usePackage("data.table")
usePackage("ROCR")
usePackage("randomForest")
usePackage("pROC")
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
install.packages('caret')
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
install.packages('caret', repos='http://cran.rstudio.com/')
source('~/Desktop/publicis/functions.R')
knitr::opts_chunk$set(results = FALSE, echo = TRUE, warning = FALSE,
error = FALSE, message=FALSE, fig.align = "center", out.width = '100%')
getwd() #just to check
rm(list = ls()); cat("\014"); if(!is.null(dev.list())) dev.off()
source("functions.R")
#this could take some time depending on packages to be installed
importLibraries()
source('~/Desktop/publicis/functions.R')
# install.packages("randomForest")
library(randomForest)
library(randomForest)
usePackage("randomForest")
r <- read.csv(file = "data/OnlineNewsPopularity.csv", na.strings = ".", header = T)
r <- r[, !names(r) %in% c('url', 'timedelta')] #timedelta is useless
r <- prepare_data_parameter(df = r, parameter = "shares", MaxValueParameter = 1, step = 0.50)
r$percentile <- revalue(r$percentile, c('[1,1.4e+03]' = 0,  '(1.4e+03,6.9e+05]'= 1))
r$shares <- NULL
train_test4 <- prepare_dataset(r = r, pourcentage_training_df = 0.85, target_variable = "percentile", verbose = F)
factors_dummies <- names(r[,grepl( "is", names(r))])
r <- read.csv(file = "data/OnlineNewsPopularity.csv", na.strings = ".", header = T)
r <- r[, !names(r) %in% c('url', 'timedelta')] #timedelta is useless
r <- prepare_data_parameter(df = r, parameter = "shares", MaxValueParameter = 1, step = 0.50)
r$percentile <- revalue(r$percentile, c('[1,1.4e+03]' = 0,  '(1.4e+03,6.9e+05]'= 1))
r$shares <- NULL
train_test4 <- prepare_dataset(r = r, pourcentage_training_df = 0.85, target_variable = "percentile", verbose = F)
ranfomForestModel <- randomForest(target ~ ., data = cbind(as.data.frame(train_test4$X_train), train_test4$Y_train),
ntree = 500,  na.action = na.omit)
#here na.omit is useless, there is no NA in the dataset, but still
summary(ranfomForestModel)
# Feature importance
ranfomForestModel$importance
varImpPlot(ranfomForestModel)
#prediction
predictions <- predict(ranfomForestModel, newdata = cbind(as.data.frame(train_test4$X_test), train_test4$Y_test))
cm <- table(train_test4$Y_test$target, predictions)
cm
# # ROC Curve
score <- prediction(predictions, train_test4$Y_test$target)
optimal <- tuneRF(cbind(as.data.frame(train_test4$X_train)),train_test4$Y_train$target,
ntreeTry=100, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
adult.rf.pr = ranfomForestModel
adult.rf.pr = predict(adult.rf,type="prob",newdata=train_test4$Y_test$target)[,2]
adult.rf.pr = predict(ranfomForestModel,type="prob",newdata=train_test4$Y_test$target)[,2]
?randomForest
#let's use the determined optimal number of mtry for each tree and create the model
adult.rf <-randomForest(target~.,data=cbind(as.data.frame(train_test4$X_train), train_test4$Y_train),
mtry=10, ntree=200, keep.forest=TRUE, importance=TRUE, xtest=cbind(as.data.frame(train_test4$X_train), train_test4$Y_train))
#let's use the determined optimal number of mtry for each tree and create the model
adult.rf <-randomForest(target~.,data=cbind(as.data.frame(train_test4$X_train), train_test4$Y_train),
mtry=10, ntree=200, keep.forest=TRUE, importance=TRUE, xtest=train_test4$Y_train$target)
#let's use the determined optimal number of mtry for each tree and create the model
adult.rf <-randomForest(target~.,data=cbind(as.data.frame(train_test4$X_train), train_test4$Y_train),
mtry=10, ntree=200, keep.forest=TRUE, importance=TRUE, test=cbind(as.data.frame(train_test4$X_train), train_test4$Y_train))
#let's use the determined optimal number of mtry for each tree and create the model
adult.rf <-randomForest(target~.,data=cbind(as.data.frame(train_test4$X_train), train_test4$Y_train),
mtry=10, ntree=200, keep.forest=TRUE, importance=TRUE,
test=cbind(as.data.frame(train_test4$X_test), train_test4$Y_test))
adult.rf.pr = predict(adult.rf,type="prob",newdata=cbind(as.data.frame(train_test4$X_test), train_test4$Y_test))[,2]
adult.rf.pred = prediction(adult.rf.pr, train_test4$Y_test$target)
adult.rf.perf = performance(adult.rf.pred,"tpr","fpr")
plot(adult.rf.perf,main="ROC Curve for Random Forest",col="#32CD32",lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
plot(adult.rf.perf,main="ROC Curve for Random Forest",col="#32CD32",lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
plot(adult.rf.perf,main="ROC Curve for Random Forest",col="#32CD32",lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray",add=T)
plot.new(abline(a=0,b=1,lwd=2,lty=2,col="gray",add=Tx
))
plot(adult.rf.perf,main="ROC Curve for Random Forest",col="#32CD32",lwd=2)
plot.new(abline(a=0,b=1,lwd=2,lty=2,col="gray",add=Tx
))
plot(performance(score,'tpr','fpr'), col="#127CD4", lwd=3)
plot(adult.rf.perf,main="ROC Curve for Random Forest",col="#32CD32",lwd=2)
text(0.15,0.5,"Random Forest",col="#32CD32")
plot(adult.rf.perf,main="ROC Curve for Random Forest",col="#32CD32",lwd=2)
#ROC Curve
pr = predict(randomForestModel,type="prob",newdata=cbind(as.data.frame(train_test4$X_test), train_test4$Y_test))[,2]
#ROC Curve
pr = predict(ranfomForestModel,type="prob",newdata=cbind(as.data.frame(train_test4$X_test), train_test4$Y_test))[,2]
#ROC Curve
pr = predict(ranfomForestModel,type="prob",newdata=cbind(as.data.frame(train_test4$X_test), train_test4$Y_test))[,2]
pred = prediction(pr, train_test4$Y_test$target)
performancee = performance(pred,"tpr","fpr")
plot(performancee,main="ROC Curve for Random Forest",col="#32CD32",lwd=2)
vect =c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,4,4,4,
4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,
10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,
14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,19,19,19,19,19,19,20,20,20,20,20,21,21,21,21,22,22,22,23,23,23,24,25,25,25,26,27,27,27,29,31,31,31,31,31,31,31,31,31,31,31,33,35,36,36,39,41,43,43,
45,45,45,46,48,52,53,54,72,77,80,83,91,106,131,137,148,181,186,213,221,227,228,236,237,244,272,289,304,339,366,375,441,481,605)
hist(vect)
hist(vect,breaks = 100)
summary(vect)
quantile(vect)
quantile(vect, 0.8)
quantile(vect, 0.9)
quantile(vect, 0.8)
r <- read.csv(file = "results.txt", sep=',', na.strings = ".", header = F)
setwd("~/Documents/3_ESILV Paris/5A/R")
r <- read.csv(file = "results.txt", sep=',', na.strings = ".", header = F)
head(r)
colnames(r) = c("alpha", "gamma", "number_of_simulations",
"honest miners validated blocks",
"selfish miners validated blocks", "revenue",
"orphanBlocks", "totalMinedBlocks")
r <- read.csv(file = "results.txt", sep=',', na.strings = ".", header = F)
head(r)
colnames(r) = c("alpha", "gamma", "number_of_simulations",
"honest miners validated blocks",
"selfish miners validated blocks", "revenue",
"orphanBlocks", "totalMinedBlocks")
colnames(r) = c("alpha", "gamma", "number_of_simulations",
"honest miners validated blocks",
"selfish miners validated blocks", "revenue")
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")+
+
theme(plot.title=element_text(size=14, face = 2),
plot.subtitle = element_text(size = 12, face=4),
axis.title.y=element_text(size = 12, vjust=+0.2),
axis.title.x=element_text(size = 12, vjust=-0.2),
axis.text.y=element_text(size = 9),
axis.text.x=element_text(size = 9),
panel.grid.major = element_blank(),
strip.background = element_rect(colour = "black", fill = "white"),
plot.caption = element_text(size = 8, hjust = 0.5, face = "bold"))
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")+
theme(plot.title=element_text(size=14, face = 2),
plot.subtitle = element_text(size = 12, face=4),
axis.title.y=element_text(size = 12, vjust=+0.2),
axis.title.x=element_text(size = 12, vjust=-0.2),
axis.text.y=element_text(size = 9),
axis.text.x=element_text(size = 9),
panel.grid.major = element_blank(),
strip.background = element_rect(colour = "black", fill = "white"),
plot.caption = element_text(size = 8, hjust = 0.5, face = "bold"))
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
getwd()
setwd(dir = "/Users/lucbertin/Documents/3_ESILV Paris/5A/Selfish Mining")
r <- read.csv(file = "results.txt", sep=',', na.strings = ".", header = F)
head(r)
colnames(r) = c("alpha", "gamma", "number_of_simulations",
"honest miners validated blocks",
"selfish miners validated blocks", "revenue")
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
unique(r$alpha)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4)
setwd(dir = "/Users/lucbertin/Documents/3_ESILV Paris/5A/Selfish Mining")
r <- read.csv(file = "results.txt", sep=',', na.strings = ".", header = F)
head(r)
colnames(r) = c("alpha", "gamma", "number_of_simulations",
"honest miners validated blocks",
"selfish miners validated blocks", "revenue")
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
geom_abline(intercept = 0, slope = 1) +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
geom_abline(intercept = 0, slope = alpha()) +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
geom_abline(intercept = 0, slope = alpha) +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
geom_abline(intercept = 0, slope = x) +
labs(x=expression(~alpha : "Mining power"),
y="Revenue",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
head(r)
colnames(r) = c("alpha", "gamma", "number_of_simulations",
"honest miners validated blocks",
"selfish miners validated blocks", "revenue",
"orphanBlocks", "TotalMinedBlocks")
r$revenue = r$revenue/100
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue ratio for Selfish Miners",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue ratio for Selfish Miners",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
+
theme(plot.title=element_text(size=14, face = 2),
plot.subtitle = element_text(size = 12, face=4),
axis.title.y=element_text(size = 12, vjust=+0.2),
axis.title.x=element_text(size = 12, vjust=-0.2),
axis.text.y=element_text(size = 9),
axis.text.x=element_text(size = 9),
panel.grid.major = element_blank(),
strip.background = element_rect(colour = "black", fill = "white"),
plot.caption = element_text(size = 8, hjust = 0.5, face = "bold"))
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue ratio for Selfish Miners",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
setwd(dir = "/Users/lucbertin/Documents/3_ESILV Paris/5A/Selfish Mining")
r <- read.csv(file = "results.txt", sep=',', na.strings = ".", header = F)
head(r)
colnames(r) = c("alpha", "gamma", "number_of_simulations",
"honest miners validated blocks",
"selfish miners validated blocks", "revenue",
"orphanBlocks", "TotalMinedBlocks")
r$revenue = r$revenue/100
library(ggplot2)
ggplot(r, aes(x=alpha, y=revenue, col=gamma))+
geom_point(alpha=0.4) + theme_bw() +
labs(x=expression(~alpha : "Mining power"),
y="Revenue ratio for Selfish Miners",
col=expression(~gamma : "Ratio of honest miners \n who choose to mine \n on the pool’s block"))+
labs(title="Simulated revenue ratio using Selfish Mining strategy",
subtitle="200,000 simulations for each case")
